<?php

namespace Bus\UsersModule\Presenters\Standard;

/**
 * Description of PrehledPresenter
 *
 * @author viky
 */
use Nette\Application\Responses\FileResponse;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class UsersPresenter extends \Bus\Presenters\Override\SecuredPresenter {

    /**
     * @inject
     * @var \Bus\UsersModule\Models\Override\UsersModel
     */
    public $users;

    /**
     * @inject
     * @var \Bus\Models\Standard\SchemaModel
     */
    public $schemaModel;

    /**
     * @inject
     * @var \Bus\Models\Standard\Core
     */
    public $core;

    /**
     * @var ?int
     */
    protected $selectId = null;

    /**
     * @var bool
     */
    protected $isModal;

    protected function startup(): void {
        parent::startup(); // TODO: Change the autogenerated stub
        $this->moduleViewAllowed('users');
    }

    protected function createComponentFilterForm(): ?\Nette\ComponentModel\IComponent {
        $form = new \Bus\Utils\BootstrapForm();
        $this->core->generateFilterFromSchema(
                $form,
                $this->schemaModel->getSchema($this->user->getIdentity()->getRoles())['users']['tableFilter'] ?? [],
                ((isset($_SESSION['users']) && isset($_SESSION['users']['filter'])) ? $_SESSION['users']['filter'] : [])
        );
        $form->addSubmit('reset', 'Resetovat filtr')
                ->getControlPrototype()
                ->setClass('btn btn-danger');

        $form->addSubmit('save', 'Aplikovat filtr')
                ->getControlPrototype()
                ->setClass('btn btn-primary');

        $form->onSuccess[] = [$this, 'saveFilter'];

        return $form;
    }

    public function saveFilter(\Nette\Application\UI\Form $form, \Nette\Utils\ArrayHash $values) {
        //samotné uložení
        if ($form->isSubmitted()->getName() == 'save') {
            $_SESSION['users'] = ['filter' => $values];
        } else {
            $_SESSION['users'] = ['filter' => []];
        }

        $this->redirect('default');
    }

    public function actionFilter() {
        $this->template->modalHeader = 'Filtrace uživatelů';
        if ($this->isAjax()) {
            $this->payload->modal = 'show';
            $this->isModal = true;
            $this->redrawControl();
        }
    }

    protected function createComponentDataGrid(): \Nette\ComponentModel\Component {
        $table = new \Arit\TableControl\TableControl;
        $table->setHeaders($this->user->getSchema()['users']['tableHeaders']);
        $table->setDataCallback([$this, 'dataLoadCallback']);
        $table->setExportCallback([$this, 'dataExportCallback']);
        $table->setNewLabel('nový uživatel');
        $table->setSchema($this->schemaModel->getSchema($this->user->getIdentity()->getRoles())['users']);
        $count = $this->core->getFilterCount((isset($_SESSION['users']) && isset($_SESSION['users']['filter'])) ? $_SESSION['users']['filter'] : []);
        $table->setFilterCount($count);
        return $table;
    }

    /**
     * @param string $sort
     * @param string $filterKey
     * @param string $filterValue
     * @param int $page
     * @return array
     */
    public function dataLoadCallback($sort, $filterKey, $filterValue, $page = 0) {
        $podFilter = $this->core->generateFilter(
                $this->schemaModel->getSchema($this->user->getIdentity()->getRoles())['users']['tableFilter'],
                ((isset($_SESSION['users']) && isset($_SESSION['users']['filter'])) ? $_SESSION['users']['filter'] : [])
        );
        $schema = $this->user->getSchema();
        $filter = $this->core->createDatagridFilter($schema['evidences']['users']['filter'] ?? [], $filterKey, $filterValue);
        $fbdetail = $this->core->createDatagridDetail($schema['users']['tableHeaders']);
        $promise = $this->users->getList($sort, array_merge($podFilter, $filter), $page * 16, 16, $fbdetail);
        $data = $promise->toArray();
        foreach ($data as &$item) {
            $item['tools'] = '<div class="btn-group" role="group">';

            $item['tools'] = $item['tools'] . '<button title="Upravit uživatele" onClick="$.nette.ajax({url: \'' . $this->link(':Users:Users:edit', $item['id']) . '\'})"  class="btn btn-primary"><span class="fa fa-pencil-square-o"></span></button>';

            $item['tools'] = $item['tools'] . '</div>';
        }

        return $data;
    }

    public function dataExportCallback($sort, $filterKey, $filterValue, $page) {
        $podFilter = $this->core->generateFilter(
                $this->schemaModel->getSchema($this->user->getIdentity()->getRoles())['users']['tableFilter'],
                ((isset($_SESSION['users']) && isset($_SESSION['users']['filter'])) ? $_SESSION['users']['filter'] : [])
        );
        $schema = $this->user->getSchema();
        $filter = $this->core->createDatagridFilter($schema['evidences']['users']['filter'] ?? [], $filterKey, $filterValue);
        $fbdetail = $this->core->createDatagridDetail($schema['users']['tableHeaders']);
        $promise = $this->users->getList($sort, array_merge($podFilter, $filter), 0, 1000, $fbdetail);
        $data = $promise->toArray();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();
        $alph = range('A', 'Z');
        $coll = 0;
        foreach ($schema['users']['tableHeaders'] as $key => $h) {
            if ($h['type'] != 'noescape') {
                $sheet->setCellValue($alph[$coll] . '1', $h['label']);
                $row = 2;
                foreach ($data as $d) {
                    if (isset($d[$key])) {
                        $sheet->setCellValue($alph[$coll] . $row, $d[$key]);
                    } else if (strpos($key, '.')) {
                        $pointer = explode('.', $key);
                        if (isset($pointer[1]) && isset($d[$pointer[0]][0]) && isset($d[$pointer[0]][0][$pointer[1]])) {
                            $sheet->setCellValue($alph[$coll] . $row, $d[$pointer[0]][0][$pointer[1]]);
                        }
                    }
                    $row++;
                }
                $coll++;
            }
        }
        $writer = new Xlsx($spreadsheet);
        $filename = 'Users.xlsx';
        $writer->save('../temp/' . $filename);
        $this->sendResponse(new FileResponse('../temp/' . $filename));
    }

    protected function createComponentEditForm(): \Nette\ComponentModel\Component {
        if (isset($this->selectId)) {
            $data = $this->users->getOne($this->selectId);
        } else {
            $data = [];
        }

        $busRoles = $this->core->getBusRoles();
        $shopRoles = $this->core->getShopRoles();

        if (!$this->user->isInRole('arit')) {
            if (isset($data['roles']) && ($key = array_search('arit', $data['roles'])) !== false) {
                $form = new \Nette\Application\UI\Form;
                $form->addCheckbox("error", "Uživatele s rolí 'arit' můžou upravovat pouze uživatelé s rolí 'arit'.");
                return $form;
            }
        }
        if (($key = array_search('arit', $busRoles)) !== false) {
            unset($busRoles[$key]);
        }

        $form = new \Bus\Utils\BootstrapForm();

        $form->addHidden('id', $data['id'] ?? -1);
        $form->addText('jmeno', 'Jméno: ');
        $form->addText('prijmeni', 'Příjmení: ');
        $form->addHidden('busPrilohaId', $data['busPrilohaId'] ?? -1);
        $form->addMultiSelect('busRoles', 'Role pro bus: ')
                ->setItems($busRoles, false);
        $form->addHidden('shopPrilohaId', $data['shopPrilohaId'] ?? -1);
        $form->addMultiSelect('shopRoles', 'Role pro shop: ')
                ->setItems($shopRoles, false);
        $form->addText('username', 'Přihlašovací jméno: ')->setRequired(true);
        $form->addHidden('busProfileId', $data['busProfileId'] ?? -1);
        $form->addText('imapname', 'Jméno pro email: ');
        $form->addPassword('imappass', 'Heslo pro email: ')
                ->setEmptyValue('');
        if (isset($data['imappass'])) {
            $imappassold = $this->users->decryptImapPassword($data['imappass']);
        }
        $form->addHidden('imappassold', $imappassold ?? '');
        $form->addText('imapserv', 'Server pro email: ');
        $form->addText('imapport', 'Port pro email: ');
        $form->addText('imapsifr', 'Šifrování pro email: ');
        $form->addText('imapfold', 'Folder pro email: ');
        $form->addHidden('stitky', $data['stitky'] ?? '');
        $form->setDefaults($data);
        $form->addPassword('password', 'Heslo: ')
                ->setEmptyValue('');
        $form->addPassword('password2', 'Heslo znovu: ')
                ->setEmptyValue('');
        $form->addSubmit('submit', 'Uložit')->setHtmlAttribute('class', 'ajax');

        $form->onSuccess[] = [$this, 'editFormSubmitted'];
        return $form;
    }

    protected function createComponentBasicEditForm(): \Nette\ComponentModel\Component {
        if (isset($this->selectId)) {
            $data = $this->users->getOne($this->selectId);
        } else {
            $data = [];
        }

        $busRoles = $this->core->getBusRoles();
        $shopRoles = $this->core->getShopRoles();

        if (!$this->user->isInRole('arit')) {
            if (isset($data['roles']) && ($key = array_search('arit', $data['roles'])) !== false) {
                $form = new \Nette\Application\UI\Form;
                $form->addCheckbox("error", "Uživatele s rolí 'arit' můžou upravovat pouze uživatelé s rolí 'arit'.");
                return $form;
            }
        }
        if (($key = array_search('arit', $busRoles)) !== false) {
            unset($busRoles[$key]);
        }

        $form = new \Bus\Utils\BootstrapForm();

        $form->addHidden('id', $data['id'] ?? -1);
        $form->addText('jmeno', 'Jméno: ');
        $form->addText('prijmeni', 'Příjmení: ');
        //$form->addHidden('busPrilohaId', $data['busPrilohaId'] ?? -1);
        $form->addTextArea('busRoless', 'Role pro bus: ')
                ->setEmptyValue(implode(', ', $data['busRoles']))
                ->setHtmlAttribute('id', 'busroless')
                ->setDisabled()
                ->setOmitted();
        //$form->addHidden('shopPrilohaId', $data['shopPrilohaId'] ?? -1);
        $form->addTextArea('shopRoless', 'Role pro shop: ')
                ->setEmptyValue(implode(', ', $data['shopRoles']))
                ->setHtmlAttribute('id', 'shoproless')
                ->setDisabled()
                ->setOmitted();
        $form->addText('username', 'Přihlašovací jméno: ')
                ->setHtmlAttribute('id', 'username')
                ->setDisabled()
                ->setOmitted();
        $form->addHidden('busProfileId', $data['busProfileId'] ?? -1);
        $form->addText('imapname', 'Jméno pro email: ');
        $form->addPassword('imappass', 'Heslo pro email: ')
                ->setEmptyValue('');
        if (isset($data['imappass'])) {
            $imappassold = $this->users->decryptImapPassword($data['imappass']);
        }
        $form->addHidden('imappassold', $imappassold ?? '');
        $form->addText('imapserv', 'Server pro email: ');
        //->setHtmlAttribute('id', 'imapserv');
        $form->addText('imapport', 'Port pro email: ');
        $form->addText('imapsifr', 'Šifrování pro email: ');
        $form->addText('imapfold', 'Folder pro email: ');
        $form->addText('imaptest', 'Test pro email: ');
        $form->addHidden('stitky', $data['stitky'] ?? '');
        $form->setDefaults($data);
        $form->addPassword('password', 'Heslo: ')
                ->setEmptyValue('');
        $form->addPassword('password2', 'Heslo znovu: ')
                ->setEmptyValue('');
        
        $form->addSubmit('submit', 'Uložit')
                ->setHtmlAttribute('class', 'btn btn-success')
                ->setHtmlAttribute('class', 'ajax');
        
        $form->addButton('testEmail', 'Poslat zkušební zprávu pro:')
                ->setHtmlAttribute('onclick', 'zprava()');

        $form->onSuccess[] = [$this, 'editFormSubmitted'];
        return $form;
    }
    

    /**
     * @param \Nette\Application\UI\Form $form
     * @param \Nette\Utils\ArrayHash $values
     */
    public function editFormSubmitted(\Nette\Application\UI\Form $form, \Nette\Utils\ArrayHash $values) {
        //bdump($values);
        //die;
        if ($values['password'] !== $values['password2']) {
            $form['password']->addError('Hesla nejsou stejná');
        } else {
            $res = [];

            if (!empty($values['imappass'])) {
                $imapPass = $values['imappass'];
                unset($values['imappass']);
            } elseif(!empty($values['imappassold'])) {
                $imapPass = $values['imappassold'];
                unset($values['imappassold']);
            }

            if (isset($imapPass)) {
                $values['imappass'] = $this->users->encryptImapPassword($imapPass);
            }
            
            $password = $values['password'];
            unset($values['password']);
            unset($values['password2']);

            if ($values['id'] < 0) {
                unset($values['id']);
            }

            $res['kontakt'] = $this->users->saveKontakt((array) $values);
            if($res['kontakt']['success'] === 'true') {
                $resId = $res['kontakt']['results'][0]['id'];

                if (!empty($password) && isset($resId)) {
                    $this->users->saveHeslo((int)$resId, $values['username'], $password);
                }
                $this->flashMessage(\Nette\Neon\Neon::encode($res, \Nette\Neon\Neon::BLOCK), 'info');
                $this->redirect('default');
            } else {
                $this->flashMessage(\Nette\Neon\Neon::encode($res['kontakt']['results'][0]['errors'][0]['message'], \Nette\Neon\Neon::BLOCK), 'danger');
            }

//            $this->redirect('default');
        }
    }

    public function actionEdit(int $id = null) {
        $this->selectId = $id;
        if ($this->isAjax()) {
            $this->template->modalHeader = 'Editace uživatele';
            $this->payload->modal = 'show';
            $this->isModal = true;
            $this->redrawControl();
        }
    }

    public function actionBasicedit(int $id = null) {
        $this->selectId = $id;
        /*
        if ($this->isAjax()) {
            $this->template->modalHeader = 'Editace uživatele';
            $this->payload->modal = 'show';
            $this->isModal = true;
            $this->redrawControl();
        }
        */
    }

}
